{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.1"
    },
    "colab": {
      "name": "Copy of Copy_of_CNN_on_CIFR_Assignment 1.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "machine_shape": "hm",
      "include_colab_link": true
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/positivezenart/Deep-learning/blob/main/Copy_of_Copy_of_CNN_on_CIFR_Assignment_1.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kK3alCdFflQX"
      },
      "source": [
        "### CNN on CIFR Assignment:"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cHCYMwwXflQd"
      },
      "source": [
        "1.  Please visit this link to access the state-of-art DenseNet code for reference - DenseNet - cifar10 notebook link\n",
        "2.  You need to create a copy of this and \"retrain\" this model to achieve 90+ test accuracy. \n",
        "3.  You cannot use DropOut layers.\n",
        "4.  You MUST use Image Augmentation Techniques.\n",
        "5.  You cannot use an already trained model as a beginning points, you have to initilize as your own\n",
        "6.  You cannot run the program for more than 300 Epochs, and it should be clear from your log, that you have only used 300 Epochs\n",
        "7.  You cannot use test images for training the model.\n",
        "8.  You cannot change the general architecture of DenseNet (which means you must use Dense Block, Transition and Output blocks as mentioned in the code)\n",
        "9.  You are free to change Convolution types (e.g. from 3x3 normal convolution to Depthwise Separable, etc)\n",
        "10. You cannot have more than 1 Million parameters in total\n",
        "11. You are free to move the code from Keras to Tensorflow, Pytorch, MXNET etc. \n",
        "12. You can use any optimization algorithm you need. \n",
        "13. You can checkpoint your model and retrain the model from that checkpoint so that no need of training the model from first if you lost at any epoch while training. You can directly load that model and Train from that epoch. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TLVcyNYKflQi"
      },
      "source": [
        "from tensorflow.keras import models, layers\n",
        "from tensorflow.keras.models import Model\n",
        "from tensorflow.keras.layers import BatchNormalization, Activation, Flatten\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "from numpy import expand_dims\n",
        "from keras.preprocessing.image import load_img\n",
        "from keras.preprocessing.image import img_to_array\n",
        "from keras.preprocessing.image import ImageDataGenerator\n",
        "from keras import regularizers\n",
        "from matplotlib import pyplot"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow as tf"
      ],
      "metadata": {
        "id": "OF2i4IoxvFrC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "gpu_info = !nvidia-smi\n",
        "gpu_info = '\\n'.join(gpu_info)\n",
        "if gpu_info.find('failed') >= 0:\n",
        "  print('Not connected to a GPU')\n",
        "else:\n",
        "  print(gpu_info)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8sxz7nNB2yIv",
        "outputId": "84b69f6c-45a0-42ee-f746-00a9c0ba8bff"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Tue May 31 13:44:53 2022       \n",
            "+-----------------------------------------------------------------------------+\n",
            "| NVIDIA-SMI 460.32.03    Driver Version: 460.32.03    CUDA Version: 11.2     |\n",
            "|-------------------------------+----------------------+----------------------+\n",
            "| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n",
            "| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n",
            "|                               |                      |               MIG M. |\n",
            "|===============================+======================+======================|\n",
            "|   0  Tesla T4            Off  | 00000000:00:04.0 Off |                    0 |\n",
            "| N/A   48C    P0    26W /  70W |   4900MiB / 15109MiB |      0%      Default |\n",
            "|                               |                      |                  N/A |\n",
            "+-------------------------------+----------------------+----------------------+\n",
            "                                                                               \n",
            "+-----------------------------------------------------------------------------+\n",
            "| Processes:                                                                  |\n",
            "|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n",
            "|        ID   ID                                                   Usage      |\n",
            "|=============================================================================|\n",
            "+-----------------------------------------------------------------------------+\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Hyperparameters\n",
        "batch_size = 128\n",
        "num_classes = 10\n",
        "epochs = 10\n",
        "l = 40\n",
        "num_filter = 12\n",
        "compression = 0.5\n",
        "dropout_rate = 0.2"
      ],
      "metadata": {
        "id": "WSM1jMq0vKQk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Load CIFAR10 Data\n",
        "(X_train, y_train), (X_test, y_test) = tf.keras.datasets.cifar10.load_data()\n",
        "img_height, img_width, channel = X_train.shape[1],X_train.shape[2],X_train.shape[3]\n",
        "\n",
        "# convert to one hot encoing \n",
        "y_train = tf.keras.utils.to_categorical(y_train, num_classes)\n",
        "y_test = tf.keras.utils.to_categorical(y_test, num_classes) "
      ],
      "metadata": {
        "id": "7wJsH5gwQFPu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "O4UP-SpuQNkm",
        "outputId": "641722f9-e5cd-470e-e2cf-733bf669bcbe"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(50000, 32, 32, 3)"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_test.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BSUkfW6EQPaG",
        "outputId": "9105838c-d7a5-4233-ad09-9330d57e63f5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(10000, 32, 32, 3)"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_train.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EoRrGRdIQPgV",
        "outputId": "42297f43-dde6-4281-ab01-6751d95a7b5e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(50000, 10)"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_test.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "G42RmlX3QR5O",
        "outputId": "f238289c-ed74-4fbc-9676-2e59a9cc8ba7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(10000, 10)"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def normalize_pixels(train, test):\n",
        "    '''\n",
        "    Normalize data into range of 0 to 1\n",
        "    '''\n",
        "    train_norm = train.astype('float32')\n",
        "    test_norm  = test.astype('float32')\n",
        "    \n",
        "    train_norm /= 255\n",
        "    test_norm /= 255\n",
        "    \n",
        "    return (train_norm, test_norm)"
      ],
      "metadata": {
        "id": "DPhuALxMQViW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train,X_test=normalize_pixels(X_train,X_test)"
      ],
      "metadata": {
        "id": "LmHJoVkOQYXl"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sample_image=X_train[4]\n",
        "sample_image.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "p8V1u0ZmQaNf",
        "outputId": "116508fb-aa9a-46f7-87fb-1051e1ba189c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(32, 32, 3)"
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sample_images = expand_dims(sample_image, 0)\n",
        "# create image data augmentation generator\n",
        "datagen = ImageDataGenerator(rotation_range=90)\n",
        "# prepare iterator\n",
        "it = datagen.flow(sample_images, batch_size=1)\n",
        "# generate sample images and plot\n",
        "for i in range(9):\n",
        "    pyplot.subplot(330 + 1 + i)\n",
        "    # generate batch of images\n",
        "    batch = it.next()\n",
        "    image = batch[0];\n",
        "    # plot raw pixel data\n",
        "    pyplot.imshow(image)\n",
        "\n",
        "# show the figure\n",
        "pyplot.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 268
        },
        "id": "dS7bkNqSQbuu",
        "outputId": "c2500bec-e22e-4aab-b13c-83d4ee359eae"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 9 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def model_summarize(history):\n",
        "    '''\n",
        "    Summarize model i.e. print train and test loss\n",
        "    '''\n",
        "    # plot loss\n",
        "    pyplot.subplot(211)\n",
        "    pyplot.title('Cross Entropy Loss')\n",
        "    pyplot.plot(history.history['loss'], color='blue', label='train')\n",
        "    pyplot.plot(history.history['val_loss'], color='orange', label='test')\n",
        "\n",
        "    # plot accuracy\n"
      ],
      "metadata": {
        "id": "n615fL8vQd4l",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 131
        },
        "outputId": "da08c7f6-bf2c-4886-a8f1-83e201c63def"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "TabError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-24-35226bbe8ee7>\"\u001b[0;36m, line \u001b[0;32m11\u001b[0m\n\u001b[0;31m    pyplot.subplot(212)\u001b[0m\n\u001b[0m                       ^\u001b[0m\n\u001b[0;31mTabError\u001b[0m\u001b[0;31m:\u001b[0m inconsistent use of tabs and spaces in indentation\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# plot diagnostic learning curves\n",
        "def model_summarize(history):\n",
        "\t# plot loss\n",
        "\tpyplot.subplot(211)\n",
        "\tpyplot.title('Cross Entropy Loss')\n",
        "\tpyplot.plot(history.history['loss'], color='blue', label='train')\n",
        "\tpyplot.plot(history.history['val_loss'], color='orange', label='test')\n",
        "\t# plot accuracy\n",
        "\tpyplot.subplot(212)\n",
        "\tpyplot.title('Classification Accuracy')\n",
        "\tpyplot.plot(history.history['accuracy'], color='blue', label='train')\n",
        "\tpyplot.plot(history.history['val_accuracy'], color='orange', label='test')\n",
        "\t# save plot to file\t\n",
        "\tpyplot.show()\n"
      ],
      "metadata": {
        "id": "pewNEXw9XiPW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def model_harness(X_train, y_train, X_test, y_test, given_batch_size, given_epochs):\n",
        "    '''\n",
        "    define model using data augmentation technique and extend it to it's vertical limit\n",
        "    '''    \n",
        "    # create data generator\n",
        "    datagen = ImageDataGenerator(width_shift_range=0.1, height_shift_range=0.1, horizontal_flip=True)\n",
        "    # prepare iterator\n",
        "    iterator_train = datagen.flow(X_train, y_train, batch_size=given_batch_size)\n",
        "    # fit model    \n",
        "    history = model.fit(iterator_train, epochs=given_epochs, validation_data=(X_test, y_test), verbose=1)\n",
        "    # evaluate model\n",
        "    _, acc = model.evaluate(X_test, y_test, verbose=1)\n",
        "    print('> %.3f' % (acc * 100.0))    \n",
        "    model_summarize(history)"
      ],
      "metadata": {
        "id": "3o7z7p85QsNu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def denseblock(input, num_filter = 64, dropout_rate = 0):\n",
        "    '''\n",
        "    Create dense block\n",
        "    '''\n",
        "    global compression\n",
        "    temp = input\n",
        "    for _ in range(l): \n",
        "        BatchNorm = layers.BatchNormalization()(temp)\n",
        "        relu = layers.Activation('relu')(BatchNorm)\n",
        "        Conv2D_5_5 = layers.Conv2D(int(num_filter*compression), (5,5),kernel_initializer=\"he_uniform\" ,padding='same')(relu)\n",
        "        if dropout_rate>0:\n",
        "            Conv2D_5_5 = layers.Dropout(dropout_rate)(Conv2D_5_5)\n",
        "        concat = layers.Concatenate(axis=-1)([temp,Conv2D_5_5])\n",
        "        \n",
        "        temp = concat\n",
        "        \n",
        "    return temp\n",
        "\n",
        "def transition(input, num_filter = 32, dropout_rate = 0):\n",
        "    '''\n",
        "    Create transition block\n",
        "    '''\n",
        "    global compression\n",
        "    BatchNorm = layers.BatchNormalization()(input)\n",
        "    relu = layers.Activation('relu')(BatchNorm)\n",
        "    Conv2D_BottleNeck = layers.Conv2D(int(num_filter*compression), (5,5), kernel_initializer=\"he_uniform\" ,padding='same')(relu)\n",
        "    if dropout_rate>0:\n",
        "         Conv2D_BottleNeck = layers.Dropout(dropout_rate)(Conv2D_BottleNeck)\n",
        "    avg = layers.AveragePooling2D(pool_size=(2,2))(Conv2D_BottleNeck)\n",
        "    \n",
        "    return avg\n",
        "\n",
        "def output_layer(input):\n",
        "    '''\n",
        "    define output layer\n",
        "    '''\n",
        "    global compression\n",
        "    BatchNorm = layers.BatchNormalization()(input)\n",
        "    relu = layers.Activation('relu')(BatchNorm)\n",
        "    AvgPooling = layers.AveragePooling2D(pool_size=(2,2))(relu)\n",
        "    flat = layers.Flatten()(AvgPooling)\n",
        "    output = layers.Dense(num_classes, activation='softmax')(flat)\n",
        "    \n",
        "    return output"
      ],
      "metadata": {
        "id": "sKPEgg1-Qv-_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "num_filter = 10\n",
        "dropout_rate = 0\n",
        "l = 12\n",
        "input = layers.Input(shape=(img_height, img_width, channel))\n",
        "First_Conv2D = layers.Conv2D(num_filter, (5,5), use_bias=False ,padding='same')(input)\n",
        "BatchNorm = layers.BatchNormalization()(First_Conv2D)\n",
        "\n",
        "First_Block = denseblock(BatchNorm,32, dropout_rate)\n",
        "First_Transition = transition(First_Block, num_filter, dropout_rate)\n",
        "\n",
        "Second_Block = denseblock(First_Transition, 16, dropout_rate)\n",
        "Second_Transition = transition(Second_Block, num_filter, dropout_rate)\n",
        "\n",
        "Third_Block = denseblock(Second_Transition, num_filter, dropout_rate)\n",
        "Third_Transition = transition(Third_Block, num_filter, dropout_rate)\n",
        "\n",
        "Last_Block = denseblock(Third_Transition,  num_filter, dropout_rate)\n",
        "output = output_layer(Last_Block)"
      ],
      "metadata": {
        "id": "Z10pP-nkQyY1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model = Model(inputs=[input], outputs=[output])\n",
        "model.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zqFg-9z6Q0hV",
        "outputId": "d5d5e72c-4af5-48f5-c6d0-a1d03a5bb8b4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"model\"\n",
            "__________________________________________________________________________________________________\n",
            " Layer (type)                   Output Shape         Param #     Connected to                     \n",
            "==================================================================================================\n",
            " input_1 (InputLayer)           [(None, 32, 32, 3)]  0           []                               \n",
            "                                                                                                  \n",
            " conv2d (Conv2D)                (None, 32, 32, 10)   750         ['input_1[0][0]']                \n",
            "                                                                                                  \n",
            " batch_normalization (BatchNorm  (None, 32, 32, 10)  40          ['conv2d[0][0]']                 \n",
            " alization)                                                                                       \n",
            "                                                                                                  \n",
            " batch_normalization_1 (BatchNo  (None, 32, 32, 10)  40          ['batch_normalization[0][0]']    \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " activation (Activation)        (None, 32, 32, 10)   0           ['batch_normalization_1[0][0]']  \n",
            "                                                                                                  \n",
            " conv2d_1 (Conv2D)              (None, 32, 32, 16)   4016        ['activation[0][0]']             \n",
            "                                                                                                  \n",
            " concatenate (Concatenate)      (None, 32, 32, 26)   0           ['batch_normalization[0][0]',    \n",
            "                                                                  'conv2d_1[0][0]']               \n",
            "                                                                                                  \n",
            " batch_normalization_2 (BatchNo  (None, 32, 32, 26)  104         ['concatenate[0][0]']            \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " activation_1 (Activation)      (None, 32, 32, 26)   0           ['batch_normalization_2[0][0]']  \n",
            "                                                                                                  \n",
            " conv2d_2 (Conv2D)              (None, 32, 32, 16)   10416       ['activation_1[0][0]']           \n",
            "                                                                                                  \n",
            " concatenate_1 (Concatenate)    (None, 32, 32, 42)   0           ['concatenate[0][0]',            \n",
            "                                                                  'conv2d_2[0][0]']               \n",
            "                                                                                                  \n",
            " batch_normalization_3 (BatchNo  (None, 32, 32, 42)  168         ['concatenate_1[0][0]']          \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " activation_2 (Activation)      (None, 32, 32, 42)   0           ['batch_normalization_3[0][0]']  \n",
            "                                                                                                  \n",
            " conv2d_3 (Conv2D)              (None, 32, 32, 16)   16816       ['activation_2[0][0]']           \n",
            "                                                                                                  \n",
            " concatenate_2 (Concatenate)    (None, 32, 32, 58)   0           ['concatenate_1[0][0]',          \n",
            "                                                                  'conv2d_3[0][0]']               \n",
            "                                                                                                  \n",
            " batch_normalization_4 (BatchNo  (None, 32, 32, 58)  232         ['concatenate_2[0][0]']          \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " activation_3 (Activation)      (None, 32, 32, 58)   0           ['batch_normalization_4[0][0]']  \n",
            "                                                                                                  \n",
            " conv2d_4 (Conv2D)              (None, 32, 32, 16)   23216       ['activation_3[0][0]']           \n",
            "                                                                                                  \n",
            " concatenate_3 (Concatenate)    (None, 32, 32, 74)   0           ['concatenate_2[0][0]',          \n",
            "                                                                  'conv2d_4[0][0]']               \n",
            "                                                                                                  \n",
            " batch_normalization_5 (BatchNo  (None, 32, 32, 74)  296         ['concatenate_3[0][0]']          \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " activation_4 (Activation)      (None, 32, 32, 74)   0           ['batch_normalization_5[0][0]']  \n",
            "                                                                                                  \n",
            " conv2d_5 (Conv2D)              (None, 32, 32, 16)   29616       ['activation_4[0][0]']           \n",
            "                                                                                                  \n",
            " concatenate_4 (Concatenate)    (None, 32, 32, 90)   0           ['concatenate_3[0][0]',          \n",
            "                                                                  'conv2d_5[0][0]']               \n",
            "                                                                                                  \n",
            " batch_normalization_6 (BatchNo  (None, 32, 32, 90)  360         ['concatenate_4[0][0]']          \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " activation_5 (Activation)      (None, 32, 32, 90)   0           ['batch_normalization_6[0][0]']  \n",
            "                                                                                                  \n",
            " conv2d_6 (Conv2D)              (None, 32, 32, 16)   36016       ['activation_5[0][0]']           \n",
            "                                                                                                  \n",
            " concatenate_5 (Concatenate)    (None, 32, 32, 106)  0           ['concatenate_4[0][0]',          \n",
            "                                                                  'conv2d_6[0][0]']               \n",
            "                                                                                                  \n",
            " batch_normalization_7 (BatchNo  (None, 32, 32, 106)  424        ['concatenate_5[0][0]']          \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " activation_6 (Activation)      (None, 32, 32, 106)  0           ['batch_normalization_7[0][0]']  \n",
            "                                                                                                  \n",
            " conv2d_7 (Conv2D)              (None, 32, 32, 16)   42416       ['activation_6[0][0]']           \n",
            "                                                                                                  \n",
            " concatenate_6 (Concatenate)    (None, 32, 32, 122)  0           ['concatenate_5[0][0]',          \n",
            "                                                                  'conv2d_7[0][0]']               \n",
            "                                                                                                  \n",
            " batch_normalization_8 (BatchNo  (None, 32, 32, 122)  488        ['concatenate_6[0][0]']          \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " activation_7 (Activation)      (None, 32, 32, 122)  0           ['batch_normalization_8[0][0]']  \n",
            "                                                                                                  \n",
            " conv2d_8 (Conv2D)              (None, 32, 32, 16)   48816       ['activation_7[0][0]']           \n",
            "                                                                                                  \n",
            " concatenate_7 (Concatenate)    (None, 32, 32, 138)  0           ['concatenate_6[0][0]',          \n",
            "                                                                  'conv2d_8[0][0]']               \n",
            "                                                                                                  \n",
            " batch_normalization_9 (BatchNo  (None, 32, 32, 138)  552        ['concatenate_7[0][0]']          \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " activation_8 (Activation)      (None, 32, 32, 138)  0           ['batch_normalization_9[0][0]']  \n",
            "                                                                                                  \n",
            " conv2d_9 (Conv2D)              (None, 32, 32, 16)   55216       ['activation_8[0][0]']           \n",
            "                                                                                                  \n",
            " concatenate_8 (Concatenate)    (None, 32, 32, 154)  0           ['concatenate_7[0][0]',          \n",
            "                                                                  'conv2d_9[0][0]']               \n",
            "                                                                                                  \n",
            " batch_normalization_10 (BatchN  (None, 32, 32, 154)  616        ['concatenate_8[0][0]']          \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_9 (Activation)      (None, 32, 32, 154)  0           ['batch_normalization_10[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_10 (Conv2D)             (None, 32, 32, 16)   61616       ['activation_9[0][0]']           \n",
            "                                                                                                  \n",
            " concatenate_9 (Concatenate)    (None, 32, 32, 170)  0           ['concatenate_8[0][0]',          \n",
            "                                                                  'conv2d_10[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_11 (BatchN  (None, 32, 32, 170)  680        ['concatenate_9[0][0]']          \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_10 (Activation)     (None, 32, 32, 170)  0           ['batch_normalization_11[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_11 (Conv2D)             (None, 32, 32, 16)   68016       ['activation_10[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_10 (Concatenate)   (None, 32, 32, 186)  0           ['concatenate_9[0][0]',          \n",
            "                                                                  'conv2d_11[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_12 (BatchN  (None, 32, 32, 186)  744        ['concatenate_10[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_11 (Activation)     (None, 32, 32, 186)  0           ['batch_normalization_12[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_12 (Conv2D)             (None, 32, 32, 16)   74416       ['activation_11[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_11 (Concatenate)   (None, 32, 32, 202)  0           ['concatenate_10[0][0]',         \n",
            "                                                                  'conv2d_12[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_13 (BatchN  (None, 32, 32, 202)  808        ['concatenate_11[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_12 (Activation)     (None, 32, 32, 202)  0           ['batch_normalization_13[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_13 (Conv2D)             (None, 32, 32, 5)    25255       ['activation_12[0][0]']          \n",
            "                                                                                                  \n",
            " average_pooling2d (AveragePool  (None, 16, 16, 5)   0           ['conv2d_13[0][0]']              \n",
            " ing2D)                                                                                           \n",
            "                                                                                                  \n",
            " batch_normalization_14 (BatchN  (None, 16, 16, 5)   20          ['average_pooling2d[0][0]']      \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_13 (Activation)     (None, 16, 16, 5)    0           ['batch_normalization_14[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_14 (Conv2D)             (None, 16, 16, 8)    1008        ['activation_13[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_12 (Concatenate)   (None, 16, 16, 13)   0           ['average_pooling2d[0][0]',      \n",
            "                                                                  'conv2d_14[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_15 (BatchN  (None, 16, 16, 13)  52          ['concatenate_12[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_14 (Activation)     (None, 16, 16, 13)   0           ['batch_normalization_15[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_15 (Conv2D)             (None, 16, 16, 8)    2608        ['activation_14[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_13 (Concatenate)   (None, 16, 16, 21)   0           ['concatenate_12[0][0]',         \n",
            "                                                                  'conv2d_15[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_16 (BatchN  (None, 16, 16, 21)  84          ['concatenate_13[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_15 (Activation)     (None, 16, 16, 21)   0           ['batch_normalization_16[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_16 (Conv2D)             (None, 16, 16, 8)    4208        ['activation_15[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_14 (Concatenate)   (None, 16, 16, 29)   0           ['concatenate_13[0][0]',         \n",
            "                                                                  'conv2d_16[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_17 (BatchN  (None, 16, 16, 29)  116         ['concatenate_14[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_16 (Activation)     (None, 16, 16, 29)   0           ['batch_normalization_17[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_17 (Conv2D)             (None, 16, 16, 8)    5808        ['activation_16[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_15 (Concatenate)   (None, 16, 16, 37)   0           ['concatenate_14[0][0]',         \n",
            "                                                                  'conv2d_17[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_18 (BatchN  (None, 16, 16, 37)  148         ['concatenate_15[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_17 (Activation)     (None, 16, 16, 37)   0           ['batch_normalization_18[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_18 (Conv2D)             (None, 16, 16, 8)    7408        ['activation_17[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_16 (Concatenate)   (None, 16, 16, 45)   0           ['concatenate_15[0][0]',         \n",
            "                                                                  'conv2d_18[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_19 (BatchN  (None, 16, 16, 45)  180         ['concatenate_16[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_18 (Activation)     (None, 16, 16, 45)   0           ['batch_normalization_19[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_19 (Conv2D)             (None, 16, 16, 8)    9008        ['activation_18[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_17 (Concatenate)   (None, 16, 16, 53)   0           ['concatenate_16[0][0]',         \n",
            "                                                                  'conv2d_19[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_20 (BatchN  (None, 16, 16, 53)  212         ['concatenate_17[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_19 (Activation)     (None, 16, 16, 53)   0           ['batch_normalization_20[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_20 (Conv2D)             (None, 16, 16, 8)    10608       ['activation_19[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_18 (Concatenate)   (None, 16, 16, 61)   0           ['concatenate_17[0][0]',         \n",
            "                                                                  'conv2d_20[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_21 (BatchN  (None, 16, 16, 61)  244         ['concatenate_18[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_20 (Activation)     (None, 16, 16, 61)   0           ['batch_normalization_21[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_21 (Conv2D)             (None, 16, 16, 8)    12208       ['activation_20[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_19 (Concatenate)   (None, 16, 16, 69)   0           ['concatenate_18[0][0]',         \n",
            "                                                                  'conv2d_21[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_22 (BatchN  (None, 16, 16, 69)  276         ['concatenate_19[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_21 (Activation)     (None, 16, 16, 69)   0           ['batch_normalization_22[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_22 (Conv2D)             (None, 16, 16, 8)    13808       ['activation_21[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_20 (Concatenate)   (None, 16, 16, 77)   0           ['concatenate_19[0][0]',         \n",
            "                                                                  'conv2d_22[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_23 (BatchN  (None, 16, 16, 77)  308         ['concatenate_20[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_22 (Activation)     (None, 16, 16, 77)   0           ['batch_normalization_23[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_23 (Conv2D)             (None, 16, 16, 8)    15408       ['activation_22[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_21 (Concatenate)   (None, 16, 16, 85)   0           ['concatenate_20[0][0]',         \n",
            "                                                                  'conv2d_23[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_24 (BatchN  (None, 16, 16, 85)  340         ['concatenate_21[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_23 (Activation)     (None, 16, 16, 85)   0           ['batch_normalization_24[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_24 (Conv2D)             (None, 16, 16, 8)    17008       ['activation_23[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_22 (Concatenate)   (None, 16, 16, 93)   0           ['concatenate_21[0][0]',         \n",
            "                                                                  'conv2d_24[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_25 (BatchN  (None, 16, 16, 93)  372         ['concatenate_22[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_24 (Activation)     (None, 16, 16, 93)   0           ['batch_normalization_25[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_25 (Conv2D)             (None, 16, 16, 8)    18608       ['activation_24[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_23 (Concatenate)   (None, 16, 16, 101)  0           ['concatenate_22[0][0]',         \n",
            "                                                                  'conv2d_25[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_26 (BatchN  (None, 16, 16, 101)  404        ['concatenate_23[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_25 (Activation)     (None, 16, 16, 101)  0           ['batch_normalization_26[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_26 (Conv2D)             (None, 16, 16, 5)    12630       ['activation_25[0][0]']          \n",
            "                                                                                                  \n",
            " average_pooling2d_1 (AveragePo  (None, 8, 8, 5)     0           ['conv2d_26[0][0]']              \n",
            " oling2D)                                                                                         \n",
            "                                                                                                  \n",
            " batch_normalization_27 (BatchN  (None, 8, 8, 5)     20          ['average_pooling2d_1[0][0]']    \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_26 (Activation)     (None, 8, 8, 5)      0           ['batch_normalization_27[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_27 (Conv2D)             (None, 8, 8, 5)      630         ['activation_26[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_24 (Concatenate)   (None, 8, 8, 10)     0           ['average_pooling2d_1[0][0]',    \n",
            "                                                                  'conv2d_27[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_28 (BatchN  (None, 8, 8, 10)    40          ['concatenate_24[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_27 (Activation)     (None, 8, 8, 10)     0           ['batch_normalization_28[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_28 (Conv2D)             (None, 8, 8, 5)      1255        ['activation_27[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_25 (Concatenate)   (None, 8, 8, 15)     0           ['concatenate_24[0][0]',         \n",
            "                                                                  'conv2d_28[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_29 (BatchN  (None, 8, 8, 15)    60          ['concatenate_25[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_28 (Activation)     (None, 8, 8, 15)     0           ['batch_normalization_29[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_29 (Conv2D)             (None, 8, 8, 5)      1880        ['activation_28[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_26 (Concatenate)   (None, 8, 8, 20)     0           ['concatenate_25[0][0]',         \n",
            "                                                                  'conv2d_29[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_30 (BatchN  (None, 8, 8, 20)    80          ['concatenate_26[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_29 (Activation)     (None, 8, 8, 20)     0           ['batch_normalization_30[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_30 (Conv2D)             (None, 8, 8, 5)      2505        ['activation_29[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_27 (Concatenate)   (None, 8, 8, 25)     0           ['concatenate_26[0][0]',         \n",
            "                                                                  'conv2d_30[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_31 (BatchN  (None, 8, 8, 25)    100         ['concatenate_27[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_30 (Activation)     (None, 8, 8, 25)     0           ['batch_normalization_31[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_31 (Conv2D)             (None, 8, 8, 5)      3130        ['activation_30[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_28 (Concatenate)   (None, 8, 8, 30)     0           ['concatenate_27[0][0]',         \n",
            "                                                                  'conv2d_31[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_32 (BatchN  (None, 8, 8, 30)    120         ['concatenate_28[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_31 (Activation)     (None, 8, 8, 30)     0           ['batch_normalization_32[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_32 (Conv2D)             (None, 8, 8, 5)      3755        ['activation_31[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_29 (Concatenate)   (None, 8, 8, 35)     0           ['concatenate_28[0][0]',         \n",
            "                                                                  'conv2d_32[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_33 (BatchN  (None, 8, 8, 35)    140         ['concatenate_29[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_32 (Activation)     (None, 8, 8, 35)     0           ['batch_normalization_33[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_33 (Conv2D)             (None, 8, 8, 5)      4380        ['activation_32[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_30 (Concatenate)   (None, 8, 8, 40)     0           ['concatenate_29[0][0]',         \n",
            "                                                                  'conv2d_33[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_34 (BatchN  (None, 8, 8, 40)    160         ['concatenate_30[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_33 (Activation)     (None, 8, 8, 40)     0           ['batch_normalization_34[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_34 (Conv2D)             (None, 8, 8, 5)      5005        ['activation_33[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_31 (Concatenate)   (None, 8, 8, 45)     0           ['concatenate_30[0][0]',         \n",
            "                                                                  'conv2d_34[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_35 (BatchN  (None, 8, 8, 45)    180         ['concatenate_31[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_34 (Activation)     (None, 8, 8, 45)     0           ['batch_normalization_35[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_35 (Conv2D)             (None, 8, 8, 5)      5630        ['activation_34[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_32 (Concatenate)   (None, 8, 8, 50)     0           ['concatenate_31[0][0]',         \n",
            "                                                                  'conv2d_35[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_36 (BatchN  (None, 8, 8, 50)    200         ['concatenate_32[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_35 (Activation)     (None, 8, 8, 50)     0           ['batch_normalization_36[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_36 (Conv2D)             (None, 8, 8, 5)      6255        ['activation_35[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_33 (Concatenate)   (None, 8, 8, 55)     0           ['concatenate_32[0][0]',         \n",
            "                                                                  'conv2d_36[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_37 (BatchN  (None, 8, 8, 55)    220         ['concatenate_33[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_36 (Activation)     (None, 8, 8, 55)     0           ['batch_normalization_37[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_37 (Conv2D)             (None, 8, 8, 5)      6880        ['activation_36[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_34 (Concatenate)   (None, 8, 8, 60)     0           ['concatenate_33[0][0]',         \n",
            "                                                                  'conv2d_37[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_38 (BatchN  (None, 8, 8, 60)    240         ['concatenate_34[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_37 (Activation)     (None, 8, 8, 60)     0           ['batch_normalization_38[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_38 (Conv2D)             (None, 8, 8, 5)      7505        ['activation_37[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_35 (Concatenate)   (None, 8, 8, 65)     0           ['concatenate_34[0][0]',         \n",
            "                                                                  'conv2d_38[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_39 (BatchN  (None, 8, 8, 65)    260         ['concatenate_35[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_38 (Activation)     (None, 8, 8, 65)     0           ['batch_normalization_39[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_39 (Conv2D)             (None, 8, 8, 5)      8130        ['activation_38[0][0]']          \n",
            "                                                                                                  \n",
            " average_pooling2d_2 (AveragePo  (None, 4, 4, 5)     0           ['conv2d_39[0][0]']              \n",
            " oling2D)                                                                                         \n",
            "                                                                                                  \n",
            " batch_normalization_40 (BatchN  (None, 4, 4, 5)     20          ['average_pooling2d_2[0][0]']    \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_39 (Activation)     (None, 4, 4, 5)      0           ['batch_normalization_40[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_40 (Conv2D)             (None, 4, 4, 5)      630         ['activation_39[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_36 (Concatenate)   (None, 4, 4, 10)     0           ['average_pooling2d_2[0][0]',    \n",
            "                                                                  'conv2d_40[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_41 (BatchN  (None, 4, 4, 10)    40          ['concatenate_36[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_40 (Activation)     (None, 4, 4, 10)     0           ['batch_normalization_41[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_41 (Conv2D)             (None, 4, 4, 5)      1255        ['activation_40[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_37 (Concatenate)   (None, 4, 4, 15)     0           ['concatenate_36[0][0]',         \n",
            "                                                                  'conv2d_41[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_42 (BatchN  (None, 4, 4, 15)    60          ['concatenate_37[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_41 (Activation)     (None, 4, 4, 15)     0           ['batch_normalization_42[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_42 (Conv2D)             (None, 4, 4, 5)      1880        ['activation_41[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_38 (Concatenate)   (None, 4, 4, 20)     0           ['concatenate_37[0][0]',         \n",
            "                                                                  'conv2d_42[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_43 (BatchN  (None, 4, 4, 20)    80          ['concatenate_38[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_42 (Activation)     (None, 4, 4, 20)     0           ['batch_normalization_43[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_43 (Conv2D)             (None, 4, 4, 5)      2505        ['activation_42[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_39 (Concatenate)   (None, 4, 4, 25)     0           ['concatenate_38[0][0]',         \n",
            "                                                                  'conv2d_43[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_44 (BatchN  (None, 4, 4, 25)    100         ['concatenate_39[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_43 (Activation)     (None, 4, 4, 25)     0           ['batch_normalization_44[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_44 (Conv2D)             (None, 4, 4, 5)      3130        ['activation_43[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_40 (Concatenate)   (None, 4, 4, 30)     0           ['concatenate_39[0][0]',         \n",
            "                                                                  'conv2d_44[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_45 (BatchN  (None, 4, 4, 30)    120         ['concatenate_40[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_44 (Activation)     (None, 4, 4, 30)     0           ['batch_normalization_45[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_45 (Conv2D)             (None, 4, 4, 5)      3755        ['activation_44[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_41 (Concatenate)   (None, 4, 4, 35)     0           ['concatenate_40[0][0]',         \n",
            "                                                                  'conv2d_45[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_46 (BatchN  (None, 4, 4, 35)    140         ['concatenate_41[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_45 (Activation)     (None, 4, 4, 35)     0           ['batch_normalization_46[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_46 (Conv2D)             (None, 4, 4, 5)      4380        ['activation_45[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_42 (Concatenate)   (None, 4, 4, 40)     0           ['concatenate_41[0][0]',         \n",
            "                                                                  'conv2d_46[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_47 (BatchN  (None, 4, 4, 40)    160         ['concatenate_42[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_46 (Activation)     (None, 4, 4, 40)     0           ['batch_normalization_47[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_47 (Conv2D)             (None, 4, 4, 5)      5005        ['activation_46[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_43 (Concatenate)   (None, 4, 4, 45)     0           ['concatenate_42[0][0]',         \n",
            "                                                                  'conv2d_47[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_48 (BatchN  (None, 4, 4, 45)    180         ['concatenate_43[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_47 (Activation)     (None, 4, 4, 45)     0           ['batch_normalization_48[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_48 (Conv2D)             (None, 4, 4, 5)      5630        ['activation_47[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_44 (Concatenate)   (None, 4, 4, 50)     0           ['concatenate_43[0][0]',         \n",
            "                                                                  'conv2d_48[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_49 (BatchN  (None, 4, 4, 50)    200         ['concatenate_44[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_48 (Activation)     (None, 4, 4, 50)     0           ['batch_normalization_49[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_49 (Conv2D)             (None, 4, 4, 5)      6255        ['activation_48[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_45 (Concatenate)   (None, 4, 4, 55)     0           ['concatenate_44[0][0]',         \n",
            "                                                                  'conv2d_49[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_50 (BatchN  (None, 4, 4, 55)    220         ['concatenate_45[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_49 (Activation)     (None, 4, 4, 55)     0           ['batch_normalization_50[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_50 (Conv2D)             (None, 4, 4, 5)      6880        ['activation_49[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_46 (Concatenate)   (None, 4, 4, 60)     0           ['concatenate_45[0][0]',         \n",
            "                                                                  'conv2d_50[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_51 (BatchN  (None, 4, 4, 60)    240         ['concatenate_46[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_50 (Activation)     (None, 4, 4, 60)     0           ['batch_normalization_51[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_51 (Conv2D)             (None, 4, 4, 5)      7505        ['activation_50[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_47 (Concatenate)   (None, 4, 4, 65)     0           ['concatenate_46[0][0]',         \n",
            "                                                                  'conv2d_51[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_52 (BatchN  (None, 4, 4, 65)    260         ['concatenate_47[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_51 (Activation)     (None, 4, 4, 65)     0           ['batch_normalization_52[0][0]'] \n",
            "                                                                                                  \n",
            " average_pooling2d_3 (AveragePo  (None, 2, 2, 65)    0           ['activation_51[0][0]']          \n",
            " oling2D)                                                                                         \n",
            "                                                                                                  \n",
            " flatten (Flatten)              (None, 260)          0           ['average_pooling2d_3[0][0]']    \n",
            "                                                                                                  \n",
            " dense (Dense)                  (None, 10)           2610        ['flatten[0][0]']                \n",
            "                                                                                                  \n",
            "==================================================================================================\n",
            "Total params: 747,231\n",
            "Trainable params: 741,257\n",
            "Non-trainable params: 5,974\n",
            "__________________________________________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# determine Loss function and Optimizer\n",
        "model.compile(loss='categorical_crossentropy',\n",
        "              optimizer=Adam(),\n",
        "              metrics=['accuracy'])"
      ],
      "metadata": {
        "id": "CXYpfJvFQ3UP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model_harness(X_train, y_train, X_test, y_test, 64 ,70)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "hSWvkxZ5U7s2",
        "outputId": "e386bba9-e375-4c3e-e438-7170f7900bcc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/70\n",
            "782/782 [==============================] - 131s 144ms/step - loss: 1.6384 - accuracy: 0.3958 - val_loss: 1.6959 - val_accuracy: 0.4049\n",
            "Epoch 2/70\n",
            "782/782 [==============================] - 111s 142ms/step - loss: 1.2942 - accuracy: 0.5305 - val_loss: 1.1774 - val_accuracy: 0.5797\n",
            "Epoch 3/70\n",
            "782/782 [==============================] - 112s 144ms/step - loss: 1.1071 - accuracy: 0.6028 - val_loss: 1.1257 - val_accuracy: 0.6066\n",
            "Epoch 4/70\n",
            "782/782 [==============================] - 113s 144ms/step - loss: 0.9804 - accuracy: 0.6509 - val_loss: 0.9691 - val_accuracy: 0.6610\n",
            "Epoch 5/70\n",
            "782/782 [==============================] - 113s 144ms/step - loss: 0.8812 - accuracy: 0.6877 - val_loss: 1.0061 - val_accuracy: 0.6536\n",
            "Epoch 6/70\n",
            "782/782 [==============================] - 113s 144ms/step - loss: 0.8164 - accuracy: 0.7117 - val_loss: 0.8813 - val_accuracy: 0.6951\n",
            "Epoch 7/70\n",
            "782/782 [==============================] - 112s 143ms/step - loss: 0.7612 - accuracy: 0.7326 - val_loss: 0.8578 - val_accuracy: 0.7045\n",
            "Epoch 8/70\n",
            "782/782 [==============================] - 113s 144ms/step - loss: 0.7133 - accuracy: 0.7495 - val_loss: 0.8686 - val_accuracy: 0.7128\n",
            "Epoch 9/70\n",
            "782/782 [==============================] - 113s 144ms/step - loss: 0.6684 - accuracy: 0.7665 - val_loss: 0.9247 - val_accuracy: 0.6897\n",
            "Epoch 10/70\n",
            "782/782 [==============================] - 113s 144ms/step - loss: 0.6339 - accuracy: 0.7785 - val_loss: 0.7301 - val_accuracy: 0.7477\n",
            "Epoch 11/70\n",
            "782/782 [==============================] - 112s 144ms/step - loss: 0.6027 - accuracy: 0.7910 - val_loss: 0.9974 - val_accuracy: 0.6916\n",
            "Epoch 12/70\n",
            "782/782 [==============================] - 113s 144ms/step - loss: 0.5801 - accuracy: 0.8003 - val_loss: 0.7174 - val_accuracy: 0.7569\n",
            "Epoch 13/70\n",
            "782/782 [==============================] - 112s 144ms/step - loss: 0.5472 - accuracy: 0.8111 - val_loss: 0.6777 - val_accuracy: 0.7740\n",
            "Epoch 14/70\n",
            "782/782 [==============================] - 113s 144ms/step - loss: 0.5289 - accuracy: 0.8173 - val_loss: 0.7540 - val_accuracy: 0.7530\n",
            "Epoch 15/70\n",
            "782/782 [==============================] - 113s 144ms/step - loss: 0.5020 - accuracy: 0.8253 - val_loss: 0.6440 - val_accuracy: 0.7864\n",
            "Epoch 16/70\n",
            "782/782 [==============================] - 113s 144ms/step - loss: 0.4876 - accuracy: 0.8305 - val_loss: 0.6271 - val_accuracy: 0.7946\n",
            "Epoch 17/70\n",
            "782/782 [==============================] - 113s 144ms/step - loss: 0.4727 - accuracy: 0.8359 - val_loss: 0.6102 - val_accuracy: 0.7946\n",
            "Epoch 18/70\n",
            "782/782 [==============================] - 113s 144ms/step - loss: 0.4529 - accuracy: 0.8441 - val_loss: 0.5823 - val_accuracy: 0.8099\n",
            "Epoch 19/70\n",
            "782/782 [==============================] - 113s 144ms/step - loss: 0.4415 - accuracy: 0.8464 - val_loss: 0.5985 - val_accuracy: 0.8002\n",
            "Epoch 20/70\n",
            "782/782 [==============================] - 112s 144ms/step - loss: 0.4284 - accuracy: 0.8508 - val_loss: 0.5859 - val_accuracy: 0.8081\n",
            "Epoch 21/70\n",
            "782/782 [==============================] - 112s 143ms/step - loss: 0.4146 - accuracy: 0.8566 - val_loss: 0.5627 - val_accuracy: 0.8118\n",
            "Epoch 22/70\n",
            "782/782 [==============================] - 112s 144ms/step - loss: 0.3995 - accuracy: 0.8617 - val_loss: 0.6511 - val_accuracy: 0.7852\n",
            "Epoch 23/70\n",
            "782/782 [==============================] - 112s 144ms/step - loss: 0.3888 - accuracy: 0.8650 - val_loss: 0.5065 - val_accuracy: 0.8335\n",
            "Epoch 24/70\n",
            "782/782 [==============================] - 113s 144ms/step - loss: 0.3776 - accuracy: 0.8702 - val_loss: 0.5353 - val_accuracy: 0.8249\n",
            "Epoch 25/70\n",
            "782/782 [==============================] - 112s 144ms/step - loss: 0.3709 - accuracy: 0.8729 - val_loss: 0.6234 - val_accuracy: 0.8014\n",
            "Epoch 26/70\n",
            "782/782 [==============================] - 112s 144ms/step - loss: 0.3564 - accuracy: 0.8767 - val_loss: 0.5225 - val_accuracy: 0.8260\n",
            "Epoch 27/70\n",
            "782/782 [==============================] - 113s 144ms/step - loss: 0.3519 - accuracy: 0.8782 - val_loss: 0.5011 - val_accuracy: 0.8303\n",
            "Epoch 28/70\n",
            "782/782 [==============================] - 112s 144ms/step - loss: 0.3402 - accuracy: 0.8819 - val_loss: 0.6050 - val_accuracy: 0.8068\n",
            "Epoch 29/70\n",
            "782/782 [==============================] - 112s 144ms/step - loss: 0.3323 - accuracy: 0.8858 - val_loss: 0.5002 - val_accuracy: 0.8366\n",
            "Epoch 30/70\n",
            "782/782 [==============================] - 112s 144ms/step - loss: 0.3211 - accuracy: 0.8887 - val_loss: 0.7298 - val_accuracy: 0.7884\n",
            "Epoch 31/70\n",
            "782/782 [==============================] - 112s 144ms/step - loss: 0.3171 - accuracy: 0.8892 - val_loss: 0.4880 - val_accuracy: 0.8414\n",
            "Epoch 32/70\n",
            "782/782 [==============================] - 112s 144ms/step - loss: 0.3098 - accuracy: 0.8916 - val_loss: 0.5563 - val_accuracy: 0.8242\n",
            "Epoch 33/70\n",
            "782/782 [==============================] - 112s 143ms/step - loss: 0.3005 - accuracy: 0.8970 - val_loss: 0.5835 - val_accuracy: 0.8203\n",
            "Epoch 34/70\n",
            "782/782 [==============================] - 112s 144ms/step - loss: 0.2932 - accuracy: 0.8992 - val_loss: 0.6514 - val_accuracy: 0.8028\n",
            "Epoch 35/70\n",
            "782/782 [==============================] - 112s 144ms/step - loss: 0.2897 - accuracy: 0.8989 - val_loss: 0.5262 - val_accuracy: 0.8333\n",
            "Epoch 36/70\n",
            "782/782 [==============================] - 112s 144ms/step - loss: 0.2816 - accuracy: 0.9027 - val_loss: 0.5445 - val_accuracy: 0.8300\n",
            "Epoch 37/70\n",
            "782/782 [==============================] - 112s 143ms/step - loss: 0.2822 - accuracy: 0.9008 - val_loss: 0.7346 - val_accuracy: 0.7866\n",
            "Epoch 38/70\n",
            "782/782 [==============================] - 113s 144ms/step - loss: 0.2728 - accuracy: 0.9049 - val_loss: 0.7009 - val_accuracy: 0.8029\n",
            "Epoch 39/70\n",
            "782/782 [==============================] - 113s 144ms/step - loss: 0.2607 - accuracy: 0.9093 - val_loss: 0.4774 - val_accuracy: 0.8522\n",
            "Epoch 40/70\n",
            "782/782 [==============================] - 113s 144ms/step - loss: 0.2552 - accuracy: 0.9108 - val_loss: 0.5172 - val_accuracy: 0.8421\n",
            "Epoch 41/70\n",
            "782/782 [==============================] - 112s 144ms/step - loss: 0.2537 - accuracy: 0.9106 - val_loss: 0.5532 - val_accuracy: 0.8302\n",
            "Epoch 42/70\n",
            "782/782 [==============================] - 113s 144ms/step - loss: 0.2477 - accuracy: 0.9120 - val_loss: 0.4900 - val_accuracy: 0.8500\n",
            "Epoch 43/70\n",
            "782/782 [==============================] - 113s 144ms/step - loss: 0.2411 - accuracy: 0.9162 - val_loss: 0.5170 - val_accuracy: 0.8437\n",
            "Epoch 44/70\n",
            "782/782 [==============================] - 113s 144ms/step - loss: 0.2389 - accuracy: 0.9158 - val_loss: 0.4647 - val_accuracy: 0.8566\n",
            "Epoch 45/70\n",
            "782/782 [==============================] - 112s 144ms/step - loss: 0.2337 - accuracy: 0.9173 - val_loss: 0.4798 - val_accuracy: 0.8544\n",
            "Epoch 46/70\n",
            "782/782 [==============================] - 113s 144ms/step - loss: 0.2259 - accuracy: 0.9212 - val_loss: 0.4840 - val_accuracy: 0.8505\n",
            "Epoch 47/70\n",
            "782/782 [==============================] - 113s 144ms/step - loss: 0.2239 - accuracy: 0.9220 - val_loss: 0.5089 - val_accuracy: 0.8469\n",
            "Epoch 48/70\n",
            "782/782 [==============================] - 113s 144ms/step - loss: 0.2223 - accuracy: 0.9232 - val_loss: 0.4647 - val_accuracy: 0.8565\n",
            "Epoch 49/70\n",
            "782/782 [==============================] - 113s 144ms/step - loss: 0.2171 - accuracy: 0.9236 - val_loss: 0.5758 - val_accuracy: 0.8311\n",
            "Epoch 50/70\n",
            "782/782 [==============================] - 113s 144ms/step - loss: 0.2106 - accuracy: 0.9251 - val_loss: 0.5261 - val_accuracy: 0.8477\n",
            "Epoch 51/70\n",
            "782/782 [==============================] - 113s 144ms/step - loss: 0.2063 - accuracy: 0.9274 - val_loss: 0.6048 - val_accuracy: 0.8299\n",
            "Epoch 52/70\n",
            "782/782 [==============================] - 113s 144ms/step - loss: 0.1985 - accuracy: 0.9316 - val_loss: 0.4668 - val_accuracy: 0.8592\n",
            "Epoch 53/70\n",
            "782/782 [==============================] - 113s 144ms/step - loss: 0.1988 - accuracy: 0.9296 - val_loss: 0.6094 - val_accuracy: 0.8314\n",
            "Epoch 54/70\n",
            "782/782 [==============================] - 112s 144ms/step - loss: 0.1983 - accuracy: 0.9311 - val_loss: 0.4848 - val_accuracy: 0.8557\n",
            "Epoch 55/70\n",
            "782/782 [==============================] - 113s 144ms/step - loss: 0.1914 - accuracy: 0.9331 - val_loss: 0.5069 - val_accuracy: 0.8552\n",
            "Epoch 56/70\n",
            "782/782 [==============================] - 113s 144ms/step - loss: 0.1881 - accuracy: 0.9349 - val_loss: 0.5302 - val_accuracy: 0.8491\n",
            "Epoch 57/70\n",
            "782/782 [==============================] - 113s 144ms/step - loss: 0.1887 - accuracy: 0.9335 - val_loss: 0.5594 - val_accuracy: 0.8405\n",
            "Epoch 58/70\n",
            "782/782 [==============================] - 113s 144ms/step - loss: 0.1824 - accuracy: 0.9351 - val_loss: 0.5800 - val_accuracy: 0.8475\n",
            "Epoch 59/70\n",
            "782/782 [==============================] - 112s 144ms/step - loss: 0.1790 - accuracy: 0.9369 - val_loss: 0.4796 - val_accuracy: 0.8609\n",
            "Epoch 60/70\n",
            "782/782 [==============================] - 113s 144ms/step - loss: 0.1754 - accuracy: 0.9374 - val_loss: 0.4615 - val_accuracy: 0.8592\n",
            "Epoch 61/70\n",
            "782/782 [==============================] - 113s 145ms/step - loss: 0.1750 - accuracy: 0.9381 - val_loss: 0.5435 - val_accuracy: 0.8475\n",
            "Epoch 62/70\n",
            "782/782 [==============================] - 113s 145ms/step - loss: 0.1701 - accuracy: 0.9410 - val_loss: 0.5382 - val_accuracy: 0.8498\n",
            "Epoch 63/70\n",
            "782/782 [==============================] - 113s 145ms/step - loss: 0.1685 - accuracy: 0.9406 - val_loss: 0.5279 - val_accuracy: 0.8533\n",
            "Epoch 64/70\n",
            "782/782 [==============================] - 113s 144ms/step - loss: 0.1681 - accuracy: 0.9402 - val_loss: 0.5207 - val_accuracy: 0.8523\n",
            "Epoch 65/70\n",
            "782/782 [==============================] - 113s 144ms/step - loss: 0.1622 - accuracy: 0.9433 - val_loss: 0.5991 - val_accuracy: 0.8413\n",
            "Epoch 66/70\n",
            "782/782 [==============================] - 113s 144ms/step - loss: 0.1594 - accuracy: 0.9444 - val_loss: 0.5142 - val_accuracy: 0.8526\n",
            "Epoch 67/70\n",
            "782/782 [==============================] - 113s 144ms/step - loss: 0.1552 - accuracy: 0.9444 - val_loss: 0.5392 - val_accuracy: 0.8478\n",
            "Epoch 68/70\n",
            "782/782 [==============================] - 113s 144ms/step - loss: 0.1542 - accuracy: 0.9459 - val_loss: 0.5877 - val_accuracy: 0.8436\n",
            "Epoch 69/70\n",
            "782/782 [==============================] - 113s 144ms/step - loss: 0.1550 - accuracy: 0.9457 - val_loss: 0.5289 - val_accuracy: 0.8509\n",
            "Epoch 70/70\n",
            "782/782 [==============================] - 113s 144ms/step - loss: 0.1495 - accuracy: 0.9471 - val_loss: 0.5144 - val_accuracy: 0.8631\n",
            "313/313 [==============================] - 8s 26ms/step - loss: 0.5144 - accuracy: 0.8631\n",
            "> 86.310\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Save the trained weights in to .h5 format\n",
        "model.save_weights(\"DNST_model_with_dense_layer.h5\")\n",
        "print(\"Saved model to disk\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Atz4nC1kVC0D",
        "outputId": "3f33a56d-9953-410b-9f0a-2459dd4ed9c8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saved model to disk\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "del model"
      ],
      "metadata": {
        "id": "_YckRqY8VEhr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Without dense layer"
      ],
      "metadata": {
        "id": "LGF0iobcY2MO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def denseblock(input, num_filter = 12, dropout_rate = 0.2):\n",
        "    '''\n",
        "    Create Dense Block\n",
        "    '''\n",
        "    global compression\n",
        "    temp = input\n",
        "    for _ in range(l): \n",
        "        \n",
        "        BatchNorm = layers.BatchNormalization()(temp)\n",
        "        relu = layers.Activation('relu')(BatchNorm)\n",
        "        \n",
        "        Conv2D_5_5 = layers.Conv2D(int(num_filter*compression), (5,5), use_bias=False ,padding='same')(relu)\n",
        "        \n",
        "        if dropout_rate>0:\n",
        "            Conv2D_5_5 = layers.Dropout(dropout_rate)(Conv2D_5_5)\n",
        "            \n",
        "        concat = layers.Concatenate(axis=-1)([temp,Conv2D_5_5])\n",
        "        \n",
        "        temp = concat\n",
        "        \n",
        "    return temp\n",
        "\n",
        "def transition(input, num_filter = 12, dropout_rate = 0.2):\n",
        "    '''\n",
        "    Create transition block\n",
        "    '''\n",
        "    global compression\n",
        "    \n",
        "    BatchNorm = layers.BatchNormalization()(input)\n",
        "    relu = layers.Activation('relu')(BatchNorm)\n",
        "    \n",
        "    Conv2D_BottleNeck = layers.Conv2D(int(num_filter*compression), (5,5), use_bias=False ,padding='same')(relu)\n",
        "    \n",
        "    if dropout_rate>0:\n",
        "         Conv2D_BottleNeck = layers.Dropout(dropout_rate)(Conv2D_BottleNeck)\n",
        "            \n",
        "    avg = layers.AveragePooling2D(pool_size=(2,2))(Conv2D_BottleNeck)\n",
        "    \n",
        "    return avg\n",
        "\n",
        "def output_layer(input):\n",
        "    '''\n",
        "    Define output layer\n",
        "    '''\n",
        "    global compression\n",
        "    \n",
        "    BatchNorm = layers.BatchNormalization()(input)\n",
        "    relu = layers.Activation('relu')(BatchNorm)\n",
        "    AvgPooling = layers. MaxPooling2D(pool_size=(2,2))(relu)\n",
        "    \n",
        "    output = layers.Conv2D(filters=10,kernel_size=(2,2),activation='softmax')(AvgPooling)\n",
        "   \n",
        "    flat = layers.Flatten()(output)\n",
        "    \n",
        "    return flat"
      ],
      "metadata": {
        "id": "9_rJrcfwVMW9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "num_filter = 12\n",
        "dropout_rate = 0\n",
        "l = 12\n",
        "input = layers.Input(shape=(img_height, img_width, channel,))\n",
        "First_Conv2D = layers.Conv2D(32, (3,3), use_bias=False ,padding='same')(input)\n",
        "\n",
        "First_Block = denseblock(First_Conv2D,10, dropout_rate)\n",
        "First_Transition = transition(First_Block, 64, dropout_rate)\n",
        "\n",
        "Second_Block = denseblock(First_Transition, 10, dropout_rate)\n",
        "Second_Transition = transition(Second_Block, 32, dropout_rate)\n",
        "\n",
        "Third_Block = denseblock(Second_Transition, num_filter, dropout_rate)\n",
        "Third_Transition = transition(Third_Block, 32, dropout_rate)\n",
        "\n",
        "Last_Block = denseblock(Third_Transition,  num_filter, dropout_rate)\n",
        "output = output_layer(Last_Block)\n",
        "\n"
      ],
      "metadata": {
        "id": "CeAfwDJ_VR6L"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model = Model(inputs=[input], outputs=[output])\n",
        "model.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WqCkOoo7VTeb",
        "outputId": "a355eedb-9484-424a-8b88-70f464f879c5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"model_1\"\n",
            "__________________________________________________________________________________________________\n",
            " Layer (type)                   Output Shape         Param #     Connected to                     \n",
            "==================================================================================================\n",
            " input_2 (InputLayer)           [(None, 32, 32, 3)]  0           []                               \n",
            "                                                                                                  \n",
            " conv2d_52 (Conv2D)             (None, 32, 32, 32)   864         ['input_2[0][0]']                \n",
            "                                                                                                  \n",
            " batch_normalization_53 (BatchN  (None, 32, 32, 32)  128         ['conv2d_52[0][0]']              \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_52 (Activation)     (None, 32, 32, 32)   0           ['batch_normalization_53[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_53 (Conv2D)             (None, 32, 32, 5)    4000        ['activation_52[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_48 (Concatenate)   (None, 32, 32, 37)   0           ['conv2d_52[0][0]',              \n",
            "                                                                  'conv2d_53[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_54 (BatchN  (None, 32, 32, 37)  148         ['concatenate_48[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_53 (Activation)     (None, 32, 32, 37)   0           ['batch_normalization_54[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_54 (Conv2D)             (None, 32, 32, 5)    4625        ['activation_53[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_49 (Concatenate)   (None, 32, 32, 42)   0           ['concatenate_48[0][0]',         \n",
            "                                                                  'conv2d_54[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_55 (BatchN  (None, 32, 32, 42)  168         ['concatenate_49[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_54 (Activation)     (None, 32, 32, 42)   0           ['batch_normalization_55[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_55 (Conv2D)             (None, 32, 32, 5)    5250        ['activation_54[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_50 (Concatenate)   (None, 32, 32, 47)   0           ['concatenate_49[0][0]',         \n",
            "                                                                  'conv2d_55[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_56 (BatchN  (None, 32, 32, 47)  188         ['concatenate_50[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_55 (Activation)     (None, 32, 32, 47)   0           ['batch_normalization_56[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_56 (Conv2D)             (None, 32, 32, 5)    5875        ['activation_55[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_51 (Concatenate)   (None, 32, 32, 52)   0           ['concatenate_50[0][0]',         \n",
            "                                                                  'conv2d_56[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_57 (BatchN  (None, 32, 32, 52)  208         ['concatenate_51[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_56 (Activation)     (None, 32, 32, 52)   0           ['batch_normalization_57[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_57 (Conv2D)             (None, 32, 32, 5)    6500        ['activation_56[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_52 (Concatenate)   (None, 32, 32, 57)   0           ['concatenate_51[0][0]',         \n",
            "                                                                  'conv2d_57[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_58 (BatchN  (None, 32, 32, 57)  228         ['concatenate_52[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_57 (Activation)     (None, 32, 32, 57)   0           ['batch_normalization_58[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_58 (Conv2D)             (None, 32, 32, 5)    7125        ['activation_57[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_53 (Concatenate)   (None, 32, 32, 62)   0           ['concatenate_52[0][0]',         \n",
            "                                                                  'conv2d_58[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_59 (BatchN  (None, 32, 32, 62)  248         ['concatenate_53[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_58 (Activation)     (None, 32, 32, 62)   0           ['batch_normalization_59[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_59 (Conv2D)             (None, 32, 32, 5)    7750        ['activation_58[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_54 (Concatenate)   (None, 32, 32, 67)   0           ['concatenate_53[0][0]',         \n",
            "                                                                  'conv2d_59[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_60 (BatchN  (None, 32, 32, 67)  268         ['concatenate_54[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_59 (Activation)     (None, 32, 32, 67)   0           ['batch_normalization_60[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_60 (Conv2D)             (None, 32, 32, 5)    8375        ['activation_59[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_55 (Concatenate)   (None, 32, 32, 72)   0           ['concatenate_54[0][0]',         \n",
            "                                                                  'conv2d_60[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_61 (BatchN  (None, 32, 32, 72)  288         ['concatenate_55[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_60 (Activation)     (None, 32, 32, 72)   0           ['batch_normalization_61[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_61 (Conv2D)             (None, 32, 32, 5)    9000        ['activation_60[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_56 (Concatenate)   (None, 32, 32, 77)   0           ['concatenate_55[0][0]',         \n",
            "                                                                  'conv2d_61[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_62 (BatchN  (None, 32, 32, 77)  308         ['concatenate_56[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_61 (Activation)     (None, 32, 32, 77)   0           ['batch_normalization_62[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_62 (Conv2D)             (None, 32, 32, 5)    9625        ['activation_61[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_57 (Concatenate)   (None, 32, 32, 82)   0           ['concatenate_56[0][0]',         \n",
            "                                                                  'conv2d_62[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_63 (BatchN  (None, 32, 32, 82)  328         ['concatenate_57[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_62 (Activation)     (None, 32, 32, 82)   0           ['batch_normalization_63[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_63 (Conv2D)             (None, 32, 32, 5)    10250       ['activation_62[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_58 (Concatenate)   (None, 32, 32, 87)   0           ['concatenate_57[0][0]',         \n",
            "                                                                  'conv2d_63[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_64 (BatchN  (None, 32, 32, 87)  348         ['concatenate_58[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_63 (Activation)     (None, 32, 32, 87)   0           ['batch_normalization_64[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_64 (Conv2D)             (None, 32, 32, 5)    10875       ['activation_63[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_59 (Concatenate)   (None, 32, 32, 92)   0           ['concatenate_58[0][0]',         \n",
            "                                                                  'conv2d_64[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_65 (BatchN  (None, 32, 32, 92)  368         ['concatenate_59[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_64 (Activation)     (None, 32, 32, 92)   0           ['batch_normalization_65[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_65 (Conv2D)             (None, 32, 32, 32)   73600       ['activation_64[0][0]']          \n",
            "                                                                                                  \n",
            " average_pooling2d_4 (AveragePo  (None, 16, 16, 32)  0           ['conv2d_65[0][0]']              \n",
            " oling2D)                                                                                         \n",
            "                                                                                                  \n",
            " batch_normalization_66 (BatchN  (None, 16, 16, 32)  128         ['average_pooling2d_4[0][0]']    \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_65 (Activation)     (None, 16, 16, 32)   0           ['batch_normalization_66[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_66 (Conv2D)             (None, 16, 16, 5)    4000        ['activation_65[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_60 (Concatenate)   (None, 16, 16, 37)   0           ['average_pooling2d_4[0][0]',    \n",
            "                                                                  'conv2d_66[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_67 (BatchN  (None, 16, 16, 37)  148         ['concatenate_60[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_66 (Activation)     (None, 16, 16, 37)   0           ['batch_normalization_67[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_67 (Conv2D)             (None, 16, 16, 5)    4625        ['activation_66[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_61 (Concatenate)   (None, 16, 16, 42)   0           ['concatenate_60[0][0]',         \n",
            "                                                                  'conv2d_67[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_68 (BatchN  (None, 16, 16, 42)  168         ['concatenate_61[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_67 (Activation)     (None, 16, 16, 42)   0           ['batch_normalization_68[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_68 (Conv2D)             (None, 16, 16, 5)    5250        ['activation_67[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_62 (Concatenate)   (None, 16, 16, 47)   0           ['concatenate_61[0][0]',         \n",
            "                                                                  'conv2d_68[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_69 (BatchN  (None, 16, 16, 47)  188         ['concatenate_62[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_68 (Activation)     (None, 16, 16, 47)   0           ['batch_normalization_69[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_69 (Conv2D)             (None, 16, 16, 5)    5875        ['activation_68[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_63 (Concatenate)   (None, 16, 16, 52)   0           ['concatenate_62[0][0]',         \n",
            "                                                                  'conv2d_69[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_70 (BatchN  (None, 16, 16, 52)  208         ['concatenate_63[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_69 (Activation)     (None, 16, 16, 52)   0           ['batch_normalization_70[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_70 (Conv2D)             (None, 16, 16, 5)    6500        ['activation_69[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_64 (Concatenate)   (None, 16, 16, 57)   0           ['concatenate_63[0][0]',         \n",
            "                                                                  'conv2d_70[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_71 (BatchN  (None, 16, 16, 57)  228         ['concatenate_64[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_70 (Activation)     (None, 16, 16, 57)   0           ['batch_normalization_71[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_71 (Conv2D)             (None, 16, 16, 5)    7125        ['activation_70[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_65 (Concatenate)   (None, 16, 16, 62)   0           ['concatenate_64[0][0]',         \n",
            "                                                                  'conv2d_71[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_72 (BatchN  (None, 16, 16, 62)  248         ['concatenate_65[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_71 (Activation)     (None, 16, 16, 62)   0           ['batch_normalization_72[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_72 (Conv2D)             (None, 16, 16, 5)    7750        ['activation_71[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_66 (Concatenate)   (None, 16, 16, 67)   0           ['concatenate_65[0][0]',         \n",
            "                                                                  'conv2d_72[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_73 (BatchN  (None, 16, 16, 67)  268         ['concatenate_66[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_72 (Activation)     (None, 16, 16, 67)   0           ['batch_normalization_73[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_73 (Conv2D)             (None, 16, 16, 5)    8375        ['activation_72[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_67 (Concatenate)   (None, 16, 16, 72)   0           ['concatenate_66[0][0]',         \n",
            "                                                                  'conv2d_73[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_74 (BatchN  (None, 16, 16, 72)  288         ['concatenate_67[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_73 (Activation)     (None, 16, 16, 72)   0           ['batch_normalization_74[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_74 (Conv2D)             (None, 16, 16, 5)    9000        ['activation_73[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_68 (Concatenate)   (None, 16, 16, 77)   0           ['concatenate_67[0][0]',         \n",
            "                                                                  'conv2d_74[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_75 (BatchN  (None, 16, 16, 77)  308         ['concatenate_68[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_74 (Activation)     (None, 16, 16, 77)   0           ['batch_normalization_75[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_75 (Conv2D)             (None, 16, 16, 5)    9625        ['activation_74[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_69 (Concatenate)   (None, 16, 16, 82)   0           ['concatenate_68[0][0]',         \n",
            "                                                                  'conv2d_75[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_76 (BatchN  (None, 16, 16, 82)  328         ['concatenate_69[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_75 (Activation)     (None, 16, 16, 82)   0           ['batch_normalization_76[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_76 (Conv2D)             (None, 16, 16, 5)    10250       ['activation_75[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_70 (Concatenate)   (None, 16, 16, 87)   0           ['concatenate_69[0][0]',         \n",
            "                                                                  'conv2d_76[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_77 (BatchN  (None, 16, 16, 87)  348         ['concatenate_70[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_76 (Activation)     (None, 16, 16, 87)   0           ['batch_normalization_77[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_77 (Conv2D)             (None, 16, 16, 5)    10875       ['activation_76[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_71 (Concatenate)   (None, 16, 16, 92)   0           ['concatenate_70[0][0]',         \n",
            "                                                                  'conv2d_77[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_78 (BatchN  (None, 16, 16, 92)  368         ['concatenate_71[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_77 (Activation)     (None, 16, 16, 92)   0           ['batch_normalization_78[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_78 (Conv2D)             (None, 16, 16, 16)   36800       ['activation_77[0][0]']          \n",
            "                                                                                                  \n",
            " average_pooling2d_5 (AveragePo  (None, 8, 8, 16)    0           ['conv2d_78[0][0]']              \n",
            " oling2D)                                                                                         \n",
            "                                                                                                  \n",
            " batch_normalization_79 (BatchN  (None, 8, 8, 16)    64          ['average_pooling2d_5[0][0]']    \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_78 (Activation)     (None, 8, 8, 16)     0           ['batch_normalization_79[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_79 (Conv2D)             (None, 8, 8, 6)      2400        ['activation_78[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_72 (Concatenate)   (None, 8, 8, 22)     0           ['average_pooling2d_5[0][0]',    \n",
            "                                                                  'conv2d_79[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_80 (BatchN  (None, 8, 8, 22)    88          ['concatenate_72[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_79 (Activation)     (None, 8, 8, 22)     0           ['batch_normalization_80[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_80 (Conv2D)             (None, 8, 8, 6)      3300        ['activation_79[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_73 (Concatenate)   (None, 8, 8, 28)     0           ['concatenate_72[0][0]',         \n",
            "                                                                  'conv2d_80[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_81 (BatchN  (None, 8, 8, 28)    112         ['concatenate_73[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_80 (Activation)     (None, 8, 8, 28)     0           ['batch_normalization_81[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_81 (Conv2D)             (None, 8, 8, 6)      4200        ['activation_80[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_74 (Concatenate)   (None, 8, 8, 34)     0           ['concatenate_73[0][0]',         \n",
            "                                                                  'conv2d_81[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_82 (BatchN  (None, 8, 8, 34)    136         ['concatenate_74[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_81 (Activation)     (None, 8, 8, 34)     0           ['batch_normalization_82[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_82 (Conv2D)             (None, 8, 8, 6)      5100        ['activation_81[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_75 (Concatenate)   (None, 8, 8, 40)     0           ['concatenate_74[0][0]',         \n",
            "                                                                  'conv2d_82[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_83 (BatchN  (None, 8, 8, 40)    160         ['concatenate_75[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_82 (Activation)     (None, 8, 8, 40)     0           ['batch_normalization_83[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_83 (Conv2D)             (None, 8, 8, 6)      6000        ['activation_82[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_76 (Concatenate)   (None, 8, 8, 46)     0           ['concatenate_75[0][0]',         \n",
            "                                                                  'conv2d_83[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_84 (BatchN  (None, 8, 8, 46)    184         ['concatenate_76[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_83 (Activation)     (None, 8, 8, 46)     0           ['batch_normalization_84[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_84 (Conv2D)             (None, 8, 8, 6)      6900        ['activation_83[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_77 (Concatenate)   (None, 8, 8, 52)     0           ['concatenate_76[0][0]',         \n",
            "                                                                  'conv2d_84[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_85 (BatchN  (None, 8, 8, 52)    208         ['concatenate_77[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_84 (Activation)     (None, 8, 8, 52)     0           ['batch_normalization_85[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_85 (Conv2D)             (None, 8, 8, 6)      7800        ['activation_84[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_78 (Concatenate)   (None, 8, 8, 58)     0           ['concatenate_77[0][0]',         \n",
            "                                                                  'conv2d_85[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_86 (BatchN  (None, 8, 8, 58)    232         ['concatenate_78[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_85 (Activation)     (None, 8, 8, 58)     0           ['batch_normalization_86[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_86 (Conv2D)             (None, 8, 8, 6)      8700        ['activation_85[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_79 (Concatenate)   (None, 8, 8, 64)     0           ['concatenate_78[0][0]',         \n",
            "                                                                  'conv2d_86[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_87 (BatchN  (None, 8, 8, 64)    256         ['concatenate_79[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_86 (Activation)     (None, 8, 8, 64)     0           ['batch_normalization_87[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_87 (Conv2D)             (None, 8, 8, 6)      9600        ['activation_86[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_80 (Concatenate)   (None, 8, 8, 70)     0           ['concatenate_79[0][0]',         \n",
            "                                                                  'conv2d_87[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_88 (BatchN  (None, 8, 8, 70)    280         ['concatenate_80[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_87 (Activation)     (None, 8, 8, 70)     0           ['batch_normalization_88[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_88 (Conv2D)             (None, 8, 8, 6)      10500       ['activation_87[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_81 (Concatenate)   (None, 8, 8, 76)     0           ['concatenate_80[0][0]',         \n",
            "                                                                  'conv2d_88[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_89 (BatchN  (None, 8, 8, 76)    304         ['concatenate_81[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_88 (Activation)     (None, 8, 8, 76)     0           ['batch_normalization_89[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_89 (Conv2D)             (None, 8, 8, 6)      11400       ['activation_88[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_82 (Concatenate)   (None, 8, 8, 82)     0           ['concatenate_81[0][0]',         \n",
            "                                                                  'conv2d_89[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_90 (BatchN  (None, 8, 8, 82)    328         ['concatenate_82[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_89 (Activation)     (None, 8, 8, 82)     0           ['batch_normalization_90[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_90 (Conv2D)             (None, 8, 8, 6)      12300       ['activation_89[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_83 (Concatenate)   (None, 8, 8, 88)     0           ['concatenate_82[0][0]',         \n",
            "                                                                  'conv2d_90[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_91 (BatchN  (None, 8, 8, 88)    352         ['concatenate_83[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_90 (Activation)     (None, 8, 8, 88)     0           ['batch_normalization_91[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_91 (Conv2D)             (None, 8, 8, 16)     35200       ['activation_90[0][0]']          \n",
            "                                                                                                  \n",
            " average_pooling2d_6 (AveragePo  (None, 4, 4, 16)    0           ['conv2d_91[0][0]']              \n",
            " oling2D)                                                                                         \n",
            "                                                                                                  \n",
            " batch_normalization_92 (BatchN  (None, 4, 4, 16)    64          ['average_pooling2d_6[0][0]']    \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_91 (Activation)     (None, 4, 4, 16)     0           ['batch_normalization_92[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_92 (Conv2D)             (None, 4, 4, 6)      2400        ['activation_91[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_84 (Concatenate)   (None, 4, 4, 22)     0           ['average_pooling2d_6[0][0]',    \n",
            "                                                                  'conv2d_92[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_93 (BatchN  (None, 4, 4, 22)    88          ['concatenate_84[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_92 (Activation)     (None, 4, 4, 22)     0           ['batch_normalization_93[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_93 (Conv2D)             (None, 4, 4, 6)      3300        ['activation_92[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_85 (Concatenate)   (None, 4, 4, 28)     0           ['concatenate_84[0][0]',         \n",
            "                                                                  'conv2d_93[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_94 (BatchN  (None, 4, 4, 28)    112         ['concatenate_85[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_93 (Activation)     (None, 4, 4, 28)     0           ['batch_normalization_94[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_94 (Conv2D)             (None, 4, 4, 6)      4200        ['activation_93[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_86 (Concatenate)   (None, 4, 4, 34)     0           ['concatenate_85[0][0]',         \n",
            "                                                                  'conv2d_94[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_95 (BatchN  (None, 4, 4, 34)    136         ['concatenate_86[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_94 (Activation)     (None, 4, 4, 34)     0           ['batch_normalization_95[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_95 (Conv2D)             (None, 4, 4, 6)      5100        ['activation_94[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_87 (Concatenate)   (None, 4, 4, 40)     0           ['concatenate_86[0][0]',         \n",
            "                                                                  'conv2d_95[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_96 (BatchN  (None, 4, 4, 40)    160         ['concatenate_87[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_95 (Activation)     (None, 4, 4, 40)     0           ['batch_normalization_96[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_96 (Conv2D)             (None, 4, 4, 6)      6000        ['activation_95[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_88 (Concatenate)   (None, 4, 4, 46)     0           ['concatenate_87[0][0]',         \n",
            "                                                                  'conv2d_96[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_97 (BatchN  (None, 4, 4, 46)    184         ['concatenate_88[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_96 (Activation)     (None, 4, 4, 46)     0           ['batch_normalization_97[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_97 (Conv2D)             (None, 4, 4, 6)      6900        ['activation_96[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_89 (Concatenate)   (None, 4, 4, 52)     0           ['concatenate_88[0][0]',         \n",
            "                                                                  'conv2d_97[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_98 (BatchN  (None, 4, 4, 52)    208         ['concatenate_89[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_97 (Activation)     (None, 4, 4, 52)     0           ['batch_normalization_98[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_98 (Conv2D)             (None, 4, 4, 6)      7800        ['activation_97[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_90 (Concatenate)   (None, 4, 4, 58)     0           ['concatenate_89[0][0]',         \n",
            "                                                                  'conv2d_98[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_99 (BatchN  (None, 4, 4, 58)    232         ['concatenate_90[0][0]']         \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_98 (Activation)     (None, 4, 4, 58)     0           ['batch_normalization_99[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_99 (Conv2D)             (None, 4, 4, 6)      8700        ['activation_98[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_91 (Concatenate)   (None, 4, 4, 64)     0           ['concatenate_90[0][0]',         \n",
            "                                                                  'conv2d_99[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_100 (Batch  (None, 4, 4, 64)    256         ['concatenate_91[0][0]']         \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " activation_99 (Activation)     (None, 4, 4, 64)     0           ['batch_normalization_100[0][0]']\n",
            "                                                                                                  \n",
            " conv2d_100 (Conv2D)            (None, 4, 4, 6)      9600        ['activation_99[0][0]']          \n",
            "                                                                                                  \n",
            " concatenate_92 (Concatenate)   (None, 4, 4, 70)     0           ['concatenate_91[0][0]',         \n",
            "                                                                  'conv2d_100[0][0]']             \n",
            "                                                                                                  \n",
            " batch_normalization_101 (Batch  (None, 4, 4, 70)    280         ['concatenate_92[0][0]']         \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " activation_100 (Activation)    (None, 4, 4, 70)     0           ['batch_normalization_101[0][0]']\n",
            "                                                                                                  \n",
            " conv2d_101 (Conv2D)            (None, 4, 4, 6)      10500       ['activation_100[0][0]']         \n",
            "                                                                                                  \n",
            " concatenate_93 (Concatenate)   (None, 4, 4, 76)     0           ['concatenate_92[0][0]',         \n",
            "                                                                  'conv2d_101[0][0]']             \n",
            "                                                                                                  \n",
            " batch_normalization_102 (Batch  (None, 4, 4, 76)    304         ['concatenate_93[0][0]']         \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " activation_101 (Activation)    (None, 4, 4, 76)     0           ['batch_normalization_102[0][0]']\n",
            "                                                                                                  \n",
            " conv2d_102 (Conv2D)            (None, 4, 4, 6)      11400       ['activation_101[0][0]']         \n",
            "                                                                                                  \n",
            " concatenate_94 (Concatenate)   (None, 4, 4, 82)     0           ['concatenate_93[0][0]',         \n",
            "                                                                  'conv2d_102[0][0]']             \n",
            "                                                                                                  \n",
            " batch_normalization_103 (Batch  (None, 4, 4, 82)    328         ['concatenate_94[0][0]']         \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " activation_102 (Activation)    (None, 4, 4, 82)     0           ['batch_normalization_103[0][0]']\n",
            "                                                                                                  \n",
            " conv2d_103 (Conv2D)            (None, 4, 4, 6)      12300       ['activation_102[0][0]']         \n",
            "                                                                                                  \n",
            " concatenate_95 (Concatenate)   (None, 4, 4, 88)     0           ['concatenate_94[0][0]',         \n",
            "                                                                  'conv2d_103[0][0]']             \n",
            "                                                                                                  \n",
            " batch_normalization_104 (Batch  (None, 4, 4, 88)    352         ['concatenate_95[0][0]']         \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " activation_103 (Activation)    (None, 4, 4, 88)     0           ['batch_normalization_104[0][0]']\n",
            "                                                                                                  \n",
            " max_pooling2d (MaxPooling2D)   (None, 2, 2, 88)     0           ['activation_103[0][0]']         \n",
            "                                                                                                  \n",
            " conv2d_104 (Conv2D)            (None, 1, 1, 10)     3530        ['max_pooling2d[0][0]']          \n",
            "                                                                                                  \n",
            " flatten_1 (Flatten)            (None, 10)           0           ['conv2d_104[0][0]']             \n",
            "                                                                                                  \n",
            "==================================================================================================\n",
            "Total params: 516,750\n",
            "Trainable params: 510,822\n",
            "Non-trainable params: 5,928\n",
            "__________________________________________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# determine Loss function and Optimizer\n",
        "model.compile(loss='categorical_crossentropy',\n",
        "              optimizer=Adam(),\n",
        "              metrics=['accuracy'])\n"
      ],
      "metadata": {
        "id": "ve8EaKMWVXQT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# sample run\n",
        "model_harness(X_train, y_train, X_test, y_test, 60,50)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "sh-cx1NvVcOT",
        "outputId": "8b9e6c0a-fbee-42ba-e002-7f6f97beb91a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/50\n",
            "834/834 [==============================] - 86s 97ms/step - loss: 1.5057 - accuracy: 0.4530 - val_loss: 1.4533 - val_accuracy: 0.4874\n",
            "Epoch 2/50\n",
            "834/834 [==============================] - 79s 95ms/step - loss: 1.0535 - accuracy: 0.6244 - val_loss: 0.9492 - val_accuracy: 0.6678\n",
            "Epoch 3/50\n",
            "834/834 [==============================] - 79s 95ms/step - loss: 0.8401 - accuracy: 0.7017 - val_loss: 0.9091 - val_accuracy: 0.6863\n",
            "Epoch 4/50\n",
            "834/834 [==============================] - 79s 95ms/step - loss: 0.7240 - accuracy: 0.7452 - val_loss: 1.0674 - val_accuracy: 0.6509\n",
            "Epoch 5/50\n",
            "834/834 [==============================] - 79s 95ms/step - loss: 0.6506 - accuracy: 0.7727 - val_loss: 0.9664 - val_accuracy: 0.6987\n",
            "Epoch 6/50\n",
            "834/834 [==============================] - 79s 94ms/step - loss: 0.5891 - accuracy: 0.7963 - val_loss: 0.7114 - val_accuracy: 0.7616\n",
            "Epoch 7/50\n",
            "834/834 [==============================] - 79s 94ms/step - loss: 0.5509 - accuracy: 0.8084 - val_loss: 0.7441 - val_accuracy: 0.7588\n",
            "Epoch 8/50\n",
            "834/834 [==============================] - 79s 94ms/step - loss: 0.5120 - accuracy: 0.8223 - val_loss: 0.7190 - val_accuracy: 0.7743\n",
            "Epoch 9/50\n",
            "834/834 [==============================] - 79s 95ms/step - loss: 0.4829 - accuracy: 0.8341 - val_loss: 0.7419 - val_accuracy: 0.7648\n",
            "Epoch 10/50\n",
            "834/834 [==============================] - 79s 95ms/step - loss: 0.4580 - accuracy: 0.8422 - val_loss: 0.6026 - val_accuracy: 0.7952\n",
            "Epoch 11/50\n",
            "834/834 [==============================] - 79s 94ms/step - loss: 0.4334 - accuracy: 0.8505 - val_loss: 0.6078 - val_accuracy: 0.7997\n",
            "Epoch 12/50\n",
            "834/834 [==============================] - 79s 95ms/step - loss: 0.4144 - accuracy: 0.8562 - val_loss: 0.5462 - val_accuracy: 0.8152\n",
            "Epoch 13/50\n",
            "834/834 [==============================] - 79s 95ms/step - loss: 0.3910 - accuracy: 0.8647 - val_loss: 0.6638 - val_accuracy: 0.7891\n",
            "Epoch 14/50\n",
            "834/834 [==============================] - 79s 95ms/step - loss: 0.3744 - accuracy: 0.8702 - val_loss: 0.5305 - val_accuracy: 0.8253\n",
            "Epoch 15/50\n",
            "834/834 [==============================] - 79s 95ms/step - loss: 0.3587 - accuracy: 0.8760 - val_loss: 0.8971 - val_accuracy: 0.7314\n",
            "Epoch 16/50\n",
            "834/834 [==============================] - 79s 95ms/step - loss: 0.3552 - accuracy: 0.8756 - val_loss: 0.5705 - val_accuracy: 0.8228\n",
            "Epoch 17/50\n",
            "834/834 [==============================] - 79s 94ms/step - loss: 0.3262 - accuracy: 0.8883 - val_loss: 0.5630 - val_accuracy: 0.8213\n",
            "Epoch 18/50\n",
            "834/834 [==============================] - 78s 94ms/step - loss: 0.3200 - accuracy: 0.8890 - val_loss: 0.4937 - val_accuracy: 0.8395\n",
            "Epoch 19/50\n",
            "834/834 [==============================] - 79s 95ms/step - loss: 0.3098 - accuracy: 0.8925 - val_loss: 0.4575 - val_accuracy: 0.8508\n",
            "Epoch 20/50\n",
            "834/834 [==============================] - 80s 96ms/step - loss: 0.2987 - accuracy: 0.8970 - val_loss: 0.5218 - val_accuracy: 0.8347\n",
            "Epoch 21/50\n",
            "834/834 [==============================] - 79s 95ms/step - loss: 0.2905 - accuracy: 0.8977 - val_loss: 0.7846 - val_accuracy: 0.7798\n",
            "Epoch 22/50\n",
            "834/834 [==============================] - 79s 95ms/step - loss: 0.2791 - accuracy: 0.9013 - val_loss: 0.5612 - val_accuracy: 0.8306\n",
            "Epoch 23/50\n",
            "834/834 [==============================] - 80s 96ms/step - loss: 0.2710 - accuracy: 0.9057 - val_loss: 0.7283 - val_accuracy: 0.7842\n",
            "Epoch 24/50\n",
            "834/834 [==============================] - 81s 97ms/step - loss: 0.2594 - accuracy: 0.9097 - val_loss: 0.6749 - val_accuracy: 0.8055\n",
            "Epoch 25/50\n",
            "834/834 [==============================] - 80s 96ms/step - loss: 0.2577 - accuracy: 0.9075 - val_loss: 0.4799 - val_accuracy: 0.8522\n",
            "Epoch 26/50\n",
            "834/834 [==============================] - 80s 96ms/step - loss: 0.2496 - accuracy: 0.9129 - val_loss: 0.6129 - val_accuracy: 0.8221\n",
            "Epoch 27/50\n",
            "834/834 [==============================] - 80s 96ms/step - loss: 0.2415 - accuracy: 0.9154 - val_loss: 0.5977 - val_accuracy: 0.8266\n",
            "Epoch 28/50\n",
            "834/834 [==============================] - 80s 95ms/step - loss: 0.2350 - accuracy: 0.9179 - val_loss: 0.5321 - val_accuracy: 0.8400\n",
            "Epoch 29/50\n",
            "834/834 [==============================] - 79s 95ms/step - loss: 0.2281 - accuracy: 0.9200 - val_loss: 0.5211 - val_accuracy: 0.8398\n",
            "Epoch 30/50\n",
            "834/834 [==============================] - 79s 95ms/step - loss: 0.2189 - accuracy: 0.9224 - val_loss: 0.4767 - val_accuracy: 0.8539\n",
            "Epoch 31/50\n",
            "834/834 [==============================] - 79s 95ms/step - loss: 0.2124 - accuracy: 0.9263 - val_loss: 0.4306 - val_accuracy: 0.8650\n",
            "Epoch 32/50\n",
            "834/834 [==============================] - 79s 95ms/step - loss: 0.2100 - accuracy: 0.9253 - val_loss: 0.5183 - val_accuracy: 0.8481\n",
            "Epoch 33/50\n",
            "834/834 [==============================] - 79s 95ms/step - loss: 0.2076 - accuracy: 0.9272 - val_loss: 0.5049 - val_accuracy: 0.8502\n",
            "Epoch 34/50\n",
            "834/834 [==============================] - 79s 95ms/step - loss: 0.2010 - accuracy: 0.9303 - val_loss: 0.5333 - val_accuracy: 0.8406\n",
            "Epoch 35/50\n",
            "834/834 [==============================] - 79s 94ms/step - loss: 0.1947 - accuracy: 0.9331 - val_loss: 0.4198 - val_accuracy: 0.8726\n",
            "Epoch 36/50\n",
            "834/834 [==============================] - 80s 96ms/step - loss: 0.1936 - accuracy: 0.9321 - val_loss: 0.4694 - val_accuracy: 0.8628\n",
            "Epoch 37/50\n",
            "834/834 [==============================] - 80s 96ms/step - loss: 0.1841 - accuracy: 0.9348 - val_loss: 0.4906 - val_accuracy: 0.8572\n",
            "Epoch 38/50\n",
            "834/834 [==============================] - 80s 96ms/step - loss: 0.1825 - accuracy: 0.9361 - val_loss: 0.5353 - val_accuracy: 0.8425\n",
            "Epoch 39/50\n",
            "834/834 [==============================] - 80s 96ms/step - loss: 0.1797 - accuracy: 0.9361 - val_loss: 0.5627 - val_accuracy: 0.8433\n",
            "Epoch 40/50\n",
            "834/834 [==============================] - 80s 96ms/step - loss: 0.1727 - accuracy: 0.9397 - val_loss: 0.4579 - val_accuracy: 0.8682\n",
            "Epoch 41/50\n",
            "834/834 [==============================] - 80s 96ms/step - loss: 0.1736 - accuracy: 0.9373 - val_loss: 0.5720 - val_accuracy: 0.8363\n",
            "Epoch 42/50\n",
            "834/834 [==============================] - 80s 96ms/step - loss: 0.1647 - accuracy: 0.9403 - val_loss: 0.4753 - val_accuracy: 0.8622\n",
            "Epoch 43/50\n",
            "834/834 [==============================] - 81s 97ms/step - loss: 0.1600 - accuracy: 0.9426 - val_loss: 0.4878 - val_accuracy: 0.8588\n",
            "Epoch 44/50\n",
            "834/834 [==============================] - 81s 97ms/step - loss: 0.1611 - accuracy: 0.9429 - val_loss: 0.5015 - val_accuracy: 0.8601\n",
            "Epoch 45/50\n",
            "834/834 [==============================] - 81s 97ms/step - loss: 0.1557 - accuracy: 0.9442 - val_loss: 0.4825 - val_accuracy: 0.8642\n",
            "Epoch 46/50\n",
            "834/834 [==============================] - 80s 96ms/step - loss: 0.1546 - accuracy: 0.9453 - val_loss: 0.6041 - val_accuracy: 0.8407\n",
            "Epoch 47/50\n",
            "834/834 [==============================] - 81s 97ms/step - loss: 0.1488 - accuracy: 0.9475 - val_loss: 0.4693 - val_accuracy: 0.8660\n",
            "Epoch 48/50\n",
            "834/834 [==============================] - 82s 98ms/step - loss: 0.1512 - accuracy: 0.9460 - val_loss: 0.5048 - val_accuracy: 0.8630\n",
            "Epoch 49/50\n",
            "834/834 [==============================] - 81s 97ms/step - loss: 0.1437 - accuracy: 0.9490 - val_loss: 0.5333 - val_accuracy: 0.8609\n",
            "Epoch 50/50\n",
            "834/834 [==============================] - 81s 97ms/step - loss: 0.1405 - accuracy: 0.9502 - val_loss: 0.5032 - val_accuracy: 0.8626\n",
            "313/313 [==============================] - 6s 18ms/step - loss: 0.5032 - accuracy: 0.8626\n",
            "> 86.260\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.save_weights(\"DNST_model_without_dense_layer.h5\")\n",
        "print(\"Saved model to disk\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NDSE8_r6wbds",
        "outputId": "3e5efd03-5985-46d3-e518-98afc04834a5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saved model to disk\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model_harness(X_train, y_train, X_test, y_test, 60,25)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Qi_vreb7wnry",
        "outputId": "fca83123-d7e7-4e22-d1af-a00909443ddf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/25\n",
            "834/834 [==============================] - 81s 97ms/step - loss: 0.1379 - accuracy: 0.9501 - val_loss: 0.4586 - val_accuracy: 0.8723\n",
            "Epoch 2/25\n",
            "834/834 [==============================] - 80s 96ms/step - loss: 0.1368 - accuracy: 0.9513 - val_loss: 0.4868 - val_accuracy: 0.8670\n",
            "Epoch 3/25\n",
            "834/834 [==============================] - 80s 96ms/step - loss: 0.1315 - accuracy: 0.9533 - val_loss: 0.5450 - val_accuracy: 0.8551\n",
            "Epoch 4/25\n",
            "834/834 [==============================] - 81s 97ms/step - loss: 0.1303 - accuracy: 0.9535 - val_loss: 0.5338 - val_accuracy: 0.8610\n",
            "Epoch 5/25\n",
            "834/834 [==============================] - 80s 96ms/step - loss: 0.1293 - accuracy: 0.9531 - val_loss: 0.4765 - val_accuracy: 0.8714\n",
            "Epoch 6/25\n",
            "834/834 [==============================] - 80s 96ms/step - loss: 0.1259 - accuracy: 0.9553 - val_loss: 0.5747 - val_accuracy: 0.8538\n",
            "Epoch 7/25\n",
            "834/834 [==============================] - 80s 96ms/step - loss: 0.1245 - accuracy: 0.9567 - val_loss: 0.5106 - val_accuracy: 0.8658\n",
            "Epoch 8/25\n",
            "834/834 [==============================] - 80s 96ms/step - loss: 0.1252 - accuracy: 0.9546 - val_loss: 0.5218 - val_accuracy: 0.8629\n",
            "Epoch 9/25\n",
            "834/834 [==============================] - 80s 96ms/step - loss: 0.1201 - accuracy: 0.9569 - val_loss: 0.4526 - val_accuracy: 0.8777\n",
            "Epoch 10/25\n",
            "834/834 [==============================] - 80s 96ms/step - loss: 0.1180 - accuracy: 0.9571 - val_loss: 0.6402 - val_accuracy: 0.8426\n",
            "Epoch 11/25\n",
            "239/834 [=======>......................] - ETA: 53s - loss: 0.1153 - accuracy: 0.9585"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from prettytable import PrettyTable\n",
        "\n",
        "table = PrettyTable()\n",
        "table.field_names = ['Model', 'Epochs', 'Train Accuracy', 'Test Accuracy']\n",
        "table.add_row(['With dense layer ', 75, 0.9478, 0.8603])\n",
        "table.add_row(['Without dense layer', '300', 0.9936,  0.8873])\n",
        "print(table)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IdBx7xN7a9ST",
        "outputId": "232ff4cd-a618-4ed0-e64b-9f7a68c014b8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+---------------------+--------+----------------+---------------+\n",
            "|        Model        | Epochs | Train Accuracy | Test Accuracy |\n",
            "+---------------------+--------+----------------+---------------+\n",
            "|  With dense layer   |   75   |     0.9478     |     0.8603    |\n",
            "| Without dense layer |  300   |     0.9936     |     0.8873    |\n",
            "+---------------------+--------+----------------+---------------+\n"
          ]
        }
      ]
    }
  ]
}
